// -- Model dump before bytecode pipeline
module 0x42::M {
    struct Box {
        f: #0,
    }
    struct Pair {
        f1: #0,
        f2: #1,
    }
    struct R {
        dummy_field: bool,
    }
    struct S {
        dummy_field: bool,
    }
    struct Sc {
        dummy_field: bool,
    }
    struct Scds {
        dummy_field: bool,
    }
    struct Sd {
        dummy_field: bool,
    }
    struct Sk {
        dummy_field: bool,
    }
    struct Ss {
        dummy_field: bool,
    }
    struct Ssk {
        dummy_field: bool,
    }
    private fun c<T>() {
        Tuple()
    }
    private fun cds<T>() {
        Tuple()
    }
    private fun d<T>() {
        Tuple()
    }
    private fun k<T>() {
        Tuple()
    }
    private fun s<T>() {
        Tuple()
    }
    private fun sk<T>() {
        Tuple()
    }
    private fun t1<Tc,Td,Ts,Tk,Tcd,Tcs,Tds,Tsk,Tcds>() {
        M::c<u64>();
        M::d<signer>();
        M::s<bool>();
        M::cds<address>();
        M::c<vector<u64>>();
        M::d<vector<signer>>();
        M::s<vector<bool>>();
        M::cds<vector<address>>();
        {
          let M::Sc<u64>{ dummy_field: _ } = pack M::Sc<u64>(false);
          {
            let M::Sd<signer>{ dummy_field: _ } = pack M::Sd<signer>(false);
            {
              let M::Ss<bool>{ dummy_field: _ } = pack M::Ss<bool>(false);
              {
                let M::Scds<address>{ dummy_field: _ } = pack M::Scds<address>(false);
                {
                  let M::Sc<vector<u64>>{ dummy_field: _ } = pack M::Sc<vector<u64>>(false);
                  {
                    let M::Sd<vector<signer>>{ dummy_field: _ } = pack M::Sd<vector<signer>>(false);
                    {
                      let M::Ss<vector<bool>>{ dummy_field: _ } = pack M::Ss<vector<bool>>(false);
                      {
                        let M::Scds<vector<address>>{ dummy_field: _ } = pack M::Scds<vector<address>>(false);
                        M::c<Tc>();
                        M::c<Tcd>();
                        M::c<Tcs>();
                        M::c<Tcds>();
                        M::d<Td>();
                        M::d<Tcd>();
                        M::d<Tds>();
                        M::d<Tcds>();
                        M::s<Ts>();
                        M::s<Tcs>();
                        M::s<Tds>();
                        M::s<Tsk>();
                        M::s<Tcds>();
                        M::k<Tk>();
                        M::k<Tsk>();
                        M::sk<Tsk>();
                        M::cds<Tcds>();
                        {
                          let M::Sc<Tc>{ dummy_field: _ } = pack M::Sc<Tc>(false);
                          {
                            let M::Sc<Tcd>{ dummy_field: _ } = pack M::Sc<Tcd>(false);
                            {
                              let M::Sc<Tcs>{ dummy_field: _ } = pack M::Sc<Tcs>(false);
                              {
                                let M::Sc<Tcds>{ dummy_field: _ } = pack M::Sc<Tcds>(false);
                                {
                                  let M::Sd<Td>{ dummy_field: _ } = pack M::Sd<Td>(false);
                                  {
                                    let M::Sd<Tcd>{ dummy_field: _ } = pack M::Sd<Tcd>(false);
                                    {
                                      let M::Sd<Tds>{ dummy_field: _ } = pack M::Sd<Tds>(false);
                                      {
                                        let M::Sd<Tcds>{ dummy_field: _ } = pack M::Sd<Tcds>(false);
                                        {
                                          let M::Ss<Ts>{ dummy_field: _ } = pack M::Ss<Ts>(false);
                                          {
                                            let M::Ss<Tcs>{ dummy_field: _ } = pack M::Ss<Tcs>(false);
                                            {
                                              let M::Ss<Tds>{ dummy_field: _ } = pack M::Ss<Tds>(false);
                                              {
                                                let M::Ss<Tsk>{ dummy_field: _ } = pack M::Ss<Tsk>(false);
                                                {
                                                  let M::Ss<Tcds>{ dummy_field: _ } = pack M::Ss<Tcds>(false);
                                                  {
                                                    let M::Sk<Tk>{ dummy_field: _ } = pack M::Sk<Tk>(false);
                                                    {
                                                      let M::Sk<Tsk>{ dummy_field: _ } = pack M::Sk<Tsk>(false);
                                                      {
                                                        let M::Ssk<Tsk>{ dummy_field: _ } = pack M::Ssk<Tsk>(false);
                                                        {
                                                          let M::Scds<Tcds>{ dummy_field: _ } = pack M::Scds<Tcds>(false);
                                                          M::c<M::S>();
                                                          M::c<M::Box<M::S>>();
                                                          M::c<M::Pair<M::Box<M::S>, M::S>>();
                                                          M::d<M::S>();
                                                          M::d<M::Box<M::S>>();
                                                          M::d<M::Pair<M::Box<M::S>, M::S>>();
                                                          M::s<M::S>();
                                                          M::s<M::R>();
                                                          M::s<M::Box<M::S>>();
                                                          M::s<M::Box<M::R>>();
                                                          M::s<M::Pair<M::Box<M::S>, M::S>>();
                                                          M::s<M::Pair<M::R, M::Box<M::Pair<M::R, M::S>>>>();
                                                          M::k<M::R>();
                                                          M::k<M::Box<M::R>>();
                                                          M::k<M::Pair<M::R, M::Box<M::R>>>();
                                                          M::k<M::Pair<M::R, M::Box<M::Pair<M::R, M::S>>>>();
                                                          M::sk<M::R>();
                                                          M::sk<M::Box<M::R>>();
                                                          M::sk<M::Pair<M::R, M::Box<M::R>>>();
                                                          M::sk<M::Pair<M::R, M::Box<M::Pair<M::R, M::S>>>>();
                                                          M::cds<M::S>();
                                                          M::cds<M::Box<M::S>>();
                                                          M::cds<M::Pair<M::Box<M::S>, M::S>>();
                                                          {
                                                            let M::Sc<M::S>{ dummy_field: _ } = pack M::Sc<M::S>(false);
                                                            {
                                                              let M::Sc<M::Box<M::S>>{ dummy_field: _ } = pack M::Sc<M::Box<M::S>>(false);
                                                              {
                                                                let M::Sc<M::Pair<M::Box<M::S>, M::S>>{ dummy_field: _ } = pack M::Sc<M::Pair<M::Box<M::S>, M::S>>(false);
                                                                {
                                                                  let M::Sd<M::S>{ dummy_field: _ } = pack M::Sd<M::S>(false);
                                                                  {
                                                                    let M::Sd<M::Box<M::S>>{ dummy_field: _ } = pack M::Sd<M::Box<M::S>>(false);
                                                                    {
                                                                      let M::Sd<M::Pair<M::Box<M::S>, M::S>>{ dummy_field: _ } = pack M::Sd<M::Pair<M::Box<M::S>, M::S>>(false);
                                                                      {
                                                                        let M::Ss<M::S>{ dummy_field: _ } = pack M::Ss<M::S>(false);
                                                                        {
                                                                          let M::Ss<M::R>{ dummy_field: _ } = pack M::Ss<M::R>(false);
                                                                          {
                                                                            let M::Ss<M::Box<M::S>>{ dummy_field: _ } = pack M::Ss<M::Box<M::S>>(false);
                                                                            {
                                                                              let M::Ss<M::Box<M::R>>{ dummy_field: _ } = pack M::Ss<M::Box<M::R>>(false);
                                                                              {
                                                                                let M::Ss<M::Pair<M::Box<M::S>, M::S>>{ dummy_field: _ } = pack M::Ss<M::Pair<M::Box<M::S>, M::S>>(false);
                                                                                {
                                                                                  let M::Ss<M::Pair<M::R, M::Box<M::Pair<M::R, M::S>>>>{ dummy_field: _ } = pack M::Ss<M::Pair<M::R, M::Box<M::Pair<M::R, M::S>>>>(false);
                                                                                  {
                                                                                    let M::Sk<M::R>{ dummy_field: _ } = pack M::Sk<M::R>(false);
                                                                                    {
                                                                                      let M::Sk<M::Box<M::R>>{ dummy_field: _ } = pack M::Sk<M::Box<M::R>>(false);
                                                                                      {
                                                                                        let M::Sk<M::Pair<M::R, M::Box<M::R>>>{ dummy_field: _ } = pack M::Sk<M::Pair<M::R, M::Box<M::R>>>(false);
                                                                                        {
                                                                                          let M::Sk<M::Pair<M::R, M::Box<M::Pair<M::R, M::S>>>>{ dummy_field: _ } = pack M::Sk<M::Pair<M::R, M::Box<M::Pair<M::R, M::S>>>>(false);
                                                                                          {
                                                                                            let M::Ssk<M::R>{ dummy_field: _ } = pack M::Ssk<M::R>(false);
                                                                                            {
                                                                                              let M::Ssk<M::Box<M::R>>{ dummy_field: _ } = pack M::Ssk<M::Box<M::R>>(false);
                                                                                              {
                                                                                                let M::Ssk<M::Pair<M::R, M::Box<M::R>>>{ dummy_field: _ } = pack M::Ssk<M::Pair<M::R, M::Box<M::R>>>(false);
                                                                                                {
                                                                                                  let M::Ssk<M::Pair<M::R, M::Box<M::Pair<M::R, M::S>>>>{ dummy_field: _ } = pack M::Ssk<M::Pair<M::R, M::Box<M::Pair<M::R, M::S>>>>(false);
                                                                                                  {
                                                                                                    let M::Scds<M::S>{ dummy_field: _ } = pack M::Scds<M::S>(false);
                                                                                                    {
                                                                                                      let M::Scds<M::Box<M::S>>{ dummy_field: _ } = pack M::Scds<M::Box<M::S>>(false);
                                                                                                      {
                                                                                                        let M::Scds<M::Pair<M::Box<M::S>, M::S>>{ dummy_field: _ } = pack M::Scds<M::Pair<M::Box<M::S>, M::S>>(false);
                                                                                                        Tuple()
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
    }
} // end 0x42::M

// -- Sourcified model before bytecode pipeline
module 0x42::M {
    struct Box<T> has copy, drop, store, key {
        f: T,
    }
    struct Pair<T1, T2> has copy, drop, store, key {
        f1: T1,
        f2: T2,
    }
    struct R has store, key {
    }
    struct S has copy, drop, store, key {
    }
    struct Sc<phantom T: copy> {
    }
    struct Scds<phantom T: copy + drop + store> {
    }
    struct Sd<phantom T: drop> {
    }
    struct Sk<phantom T: key> {
    }
    struct Ss<phantom T: store> {
    }
    struct Ssk<phantom T: store + key> {
    }
    fun c<T: copy>() {
    }
    fun cds<T: copy + drop + store>() {
    }
    fun d<T: drop>() {
    }
    fun k<T: key>() {
    }
    fun s<T: store>() {
    }
    fun sk<T: store + key>() {
    }
    fun t1<Tc: copy, Td: drop, Ts: store, Tk: key, Tcd: copy + drop, Tcs: copy + store, Tds: drop + store, Tsk: store + key, Tcds: copy + drop + store>() {
        c<u64>();
        d<signer>();
        s<bool>();
        cds<address>();
        c<vector<u64>>();
        d<vector<signer>>();
        s<vector<bool>>();
        cds<vector<address>>();
        let Sc<u64>{dummy_field: _} = Sc<u64>{dummy_field: false};
        let Sd<signer>{dummy_field: _} = Sd<signer>{dummy_field: false};
        let Ss<bool>{dummy_field: _} = Ss<bool>{dummy_field: false};
        let Scds<address>{dummy_field: _} = Scds<address>{dummy_field: false};
        let Sc<vector<u64>>{dummy_field: _} = Sc<vector<u64>>{dummy_field: false};
        let Sd<vector<signer>>{dummy_field: _} = Sd<vector<signer>>{dummy_field: false};
        let Ss<vector<bool>>{dummy_field: _} = Ss<vector<bool>>{dummy_field: false};
        let Scds<vector<address>>{dummy_field: _} = Scds<vector<address>>{dummy_field: false};
        c<Tc>();
        c<Tcd>();
        c<Tcs>();
        c<Tcds>();
        d<Td>();
        d<Tcd>();
        d<Tds>();
        d<Tcds>();
        s<Ts>();
        s<Tcs>();
        s<Tds>();
        s<Tsk>();
        s<Tcds>();
        k<Tk>();
        k<Tsk>();
        sk<Tsk>();
        cds<Tcds>();
        let Sc<Tc>{dummy_field: _} = Sc<Tc>{dummy_field: false};
        let Sc<Tcd>{dummy_field: _} = Sc<Tcd>{dummy_field: false};
        let Sc<Tcs>{dummy_field: _} = Sc<Tcs>{dummy_field: false};
        let Sc<Tcds>{dummy_field: _} = Sc<Tcds>{dummy_field: false};
        let Sd<Td>{dummy_field: _} = Sd<Td>{dummy_field: false};
        let Sd<Tcd>{dummy_field: _} = Sd<Tcd>{dummy_field: false};
        let Sd<Tds>{dummy_field: _} = Sd<Tds>{dummy_field: false};
        let Sd<Tcds>{dummy_field: _} = Sd<Tcds>{dummy_field: false};
        let Ss<Ts>{dummy_field: _} = Ss<Ts>{dummy_field: false};
        let Ss<Tcs>{dummy_field: _} = Ss<Tcs>{dummy_field: false};
        let Ss<Tds>{dummy_field: _} = Ss<Tds>{dummy_field: false};
        let Ss<Tsk>{dummy_field: _} = Ss<Tsk>{dummy_field: false};
        let Ss<Tcds>{dummy_field: _} = Ss<Tcds>{dummy_field: false};
        let Sk<Tk>{dummy_field: _} = Sk<Tk>{dummy_field: false};
        let Sk<Tsk>{dummy_field: _} = Sk<Tsk>{dummy_field: false};
        let Ssk<Tsk>{dummy_field: _} = Ssk<Tsk>{dummy_field: false};
        let Scds<Tcds>{dummy_field: _} = Scds<Tcds>{dummy_field: false};
        c<S>();
        c<Box<S>>();
        c<Pair<Box<S>, S>>();
        d<S>();
        d<Box<S>>();
        d<Pair<Box<S>, S>>();
        s<S>();
        s<R>();
        s<Box<S>>();
        s<Box<R>>();
        s<Pair<Box<S>, S>>();
        s<Pair<R, Box<Pair<R, S>>>>();
        k<R>();
        k<Box<R>>();
        k<Pair<R, Box<R>>>();
        k<Pair<R, Box<Pair<R, S>>>>();
        sk<R>();
        sk<Box<R>>();
        sk<Pair<R, Box<R>>>();
        sk<Pair<R, Box<Pair<R, S>>>>();
        cds<S>();
        cds<Box<S>>();
        cds<Pair<Box<S>, S>>();
        let Sc<S>{dummy_field: _} = Sc<S>{dummy_field: false};
        let Sc<Box<S>>{dummy_field: _} = Sc<Box<S>>{dummy_field: false};
        let Sc<Pair<Box<S>, S>>{dummy_field: _} = Sc<Pair<Box<S>, S>>{dummy_field: false};
        let Sd<S>{dummy_field: _} = Sd<S>{dummy_field: false};
        let Sd<Box<S>>{dummy_field: _} = Sd<Box<S>>{dummy_field: false};
        let Sd<Pair<Box<S>, S>>{dummy_field: _} = Sd<Pair<Box<S>, S>>{dummy_field: false};
        let Ss<S>{dummy_field: _} = Ss<S>{dummy_field: false};
        let Ss<R>{dummy_field: _} = Ss<R>{dummy_field: false};
        let Ss<Box<S>>{dummy_field: _} = Ss<Box<S>>{dummy_field: false};
        let Ss<Box<R>>{dummy_field: _} = Ss<Box<R>>{dummy_field: false};
        let Ss<Pair<Box<S>, S>>{dummy_field: _} = Ss<Pair<Box<S>, S>>{dummy_field: false};
        let Ss<Pair<R, Box<Pair<R, S>>>>{dummy_field: _} = Ss<Pair<R, Box<Pair<R, S>>>>{dummy_field: false};
        let Sk<R>{dummy_field: _} = Sk<R>{dummy_field: false};
        let Sk<Box<R>>{dummy_field: _} = Sk<Box<R>>{dummy_field: false};
        let Sk<Pair<R, Box<R>>>{dummy_field: _} = Sk<Pair<R, Box<R>>>{dummy_field: false};
        let Sk<Pair<R, Box<Pair<R, S>>>>{dummy_field: _} = Sk<Pair<R, Box<Pair<R, S>>>>{dummy_field: false};
        let Ssk<R>{dummy_field: _} = Ssk<R>{dummy_field: false};
        let Ssk<Box<R>>{dummy_field: _} = Ssk<Box<R>>{dummy_field: false};
        let Ssk<Pair<R, Box<R>>>{dummy_field: _} = Ssk<Pair<R, Box<R>>>{dummy_field: false};
        let Ssk<Pair<R, Box<Pair<R, S>>>>{dummy_field: _} = Ssk<Pair<R, Box<Pair<R, S>>>>{dummy_field: false};
        let Scds<S>{dummy_field: _} = Scds<S>{dummy_field: false};
        let Scds<Box<S>>{dummy_field: _} = Scds<Box<S>>{dummy_field: false};
        let Scds<Pair<Box<S>, S>>{dummy_field: _} = Scds<Pair<Box<S>, S>>{dummy_field: false};
    }
}
